{
  "_format": "hh3-sol-build-info-1",
  "id": "7730621748f78c65dd62cc2b2351bdba284ba91e",
  "solcVersion": "0.8.24",
  "solcLongVersion": "0.8.24+commit.e11b9ed9",
  "userSourceNameMap": {
    "contracts/ExpertFactory.sol": "project/contracts/ExpertFactory.sol",
    "contracts/ExpertToken.sol": "project/contracts/ExpertToken.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "evmVersion": "shanghai",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.3.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/interfaces/draft-IERC6093.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/token/ERC20/ERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/token/ERC20/extensions/IERC20Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "project/contracts/ExpertFactory.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"./ExpertToken.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title ExpertFactory\n * @dev Factory contract for creating and managing expert tokens\n * \n * This contract automatically deploys new ExpertToken contracts for each expert\n * and maintains a registry of all experts on the platform. It reads configuration\n * from the frontend JSON and creates tokens accordingly.\n * \n * Key functions:\n * - Deploy new expert tokens with proper configuration\n * - Maintain registry of all experts\n * - Provide discovery mechanism for frontend\n * - Handle expert onboarding process\n */\ncontract ExpertFactory is Ownable {\n    // Expert registry\n    struct ExpertInfo {\n        address tokenAddress;      // Address of expert's ERC-20 token\n        string name;              // Human readable name (e.g. \"Peter Thiel\")\n        string symbol;            // Token symbol (e.g. \"btTHIEL\")\n        string category;          // Expert category (e.g. \"Venture Capital\")\n        uint256 tokensPerQuery;   // Cost per consultation in tokens\n        address expertAddress;    // Expert's wallet for revenue\n        bool isActive;           // Whether expert is active\n        uint256 totalConsultations; // Total consultations across all experts\n        uint256 totalRevenue;     // Total revenue generated\n    }\n    \n    // State variables\n    mapping(string => ExpertInfo) public experts;        // symbol => ExpertInfo\n    mapping(address => string) public tokenToSymbol;     // token address => symbol\n    string[] public expertSymbols;                       // Array of all expert symbols\n    address public platformAddress;                      // Platform wallet for fees\n    \n    // Events for tracking expert lifecycle\n    event ExpertCreated(\n        string indexed symbol,\n        address indexed tokenAddress,\n        address indexed expertAddress,\n        string name,\n        uint256 tokensPerQuery\n    );\n    event ExpertUpdated(string indexed symbol, uint256 newTokensPerQuery);\n    event ExpertActivated(string indexed symbol);\n    event ExpertDeactivated(string indexed symbol);\n    \n    /**\n     * @dev Initialize factory with platform address\n     * @param _platformAddress Platform wallet for receiving fees\n     */\n    constructor(address _platformAddress) Ownable(msg.sender) {\n        require(_platformAddress != address(0), \"Platform address cannot be zero\");\n        platformAddress = _platformAddress;\n    }\n    \n    /**\n     * @dev Create new expert token from JSON configuration\n     * This function is called by backend when new expert is onboarded\n     * @param _name Expert name (e.g. \"Peter Thiel\")\n     * @param _symbol Token symbol (e.g. \"btTHIEL\")\n     * @param _category Expert category (e.g. \"Venture Capital\") \n     * @param _tokensPerQuery Cost per consultation in expert tokens\n     * @param _expertAddress Expert's wallet address for revenue\n     * @return tokenAddress Address of deployed ExpertToken contract\n     */\n    function createExpert(\n        string memory _name,\n        string memory _symbol,\n        string memory _category,\n        uint256 _tokensPerQuery,\n        address _expertAddress\n    ) external onlyOwner returns (address) {\n        require(bytes(_name).length > 0, \"Name cannot be empty\");\n        require(bytes(_symbol).length > 0, \"Symbol cannot be empty\");\n        require(_tokensPerQuery > 0, \"Tokens per query must be greater than 0\");\n        require(_expertAddress != address(0), \"Expert address cannot be zero\");\n        require(experts[_symbol].tokenAddress == address(0), \"Expert already exists\");\n        \n        // Create token name in format \"BrainTrade {Expert Name} Token\"\n        string memory tokenName = string(abi.encodePacked(\"BrainTrade \", _name, \" Token\"));\n        \n        // Deploy new ExpertToken contract\n        ExpertToken expertToken = new ExpertToken(\n            tokenName,\n            _symbol,\n            _name,\n            _category,\n            _tokensPerQuery,\n            _expertAddress,\n            platformAddress\n        );\n        \n        address tokenAddress = address(expertToken);\n        \n        // Register expert in our registry\n        experts[_symbol] = ExpertInfo({\n            tokenAddress: tokenAddress,\n            name: _name,\n            symbol: _symbol,\n            category: _category,\n            tokensPerQuery: _tokensPerQuery,\n            expertAddress: _expertAddress,\n            isActive: true,\n            totalConsultations: 0,\n            totalRevenue: 0\n        });\n        \n        // Update mappings\n        tokenToSymbol[tokenAddress] = _symbol;\n        expertSymbols.push(_symbol);\n        \n        emit ExpertCreated(_symbol, tokenAddress, _expertAddress, _name, _tokensPerQuery);\n        \n        return tokenAddress;\n    }\n    \n    /**\n     * @dev Get all expert information for frontend discovery\n     * @return symbols_ Array of expert symbols\n     * @return tokenAddresses_ Array of corresponding token addresses\n     * @return names_ Array of expert names\n     * @return categories_ Array of expert categories\n     * @return tokensPerQuery_ Array of consultation costs\n     * @return isActive_ Array of activity status\n     */\n    function getAllExperts() external view returns (\n        string[] memory symbols_,\n        address[] memory tokenAddresses_,\n        string[] memory names_,\n        string[] memory categories_,\n        uint256[] memory tokensPerQuery_,\n        bool[] memory isActive_\n    ) {\n        uint256 length = expertSymbols.length;\n        \n        symbols_ = new string[](length);\n        tokenAddresses_ = new address[](length);\n        names_ = new string[](length);\n        categories_ = new string[](length);\n        tokensPerQuery_ = new uint256[](length);\n        isActive_ = new bool[](length);\n        \n        for (uint256 i = 0; i < length; i++) {\n            string memory symbol = expertSymbols[i];\n            ExpertInfo memory expert = experts[symbol];\n            \n            symbols_[i] = symbol;\n            tokenAddresses_[i] = expert.tokenAddress;\n            names_[i] = expert.name;\n            categories_[i] = expert.category;\n            tokensPerQuery_[i] = expert.tokensPerQuery;\n            isActive_[i] = expert.isActive;\n        }\n    }\n    \n    /**\n     * @dev Get specific expert information by symbol\n     * @param _symbol Expert symbol (e.g. \"btTHIEL\")\n     * @return expert_ Complete expert information\n     */\n    function getExpert(string memory _symbol) external view returns (ExpertInfo memory) {\n        require(experts[_symbol].tokenAddress != address(0), \"Expert does not exist\");\n        return experts[_symbol];\n    }\n    \n    /**\n     * @dev Get expert information by token address\n     * @param _tokenAddress Expert token address\n     * @return expert_ Complete expert information\n     */\n    function getExpertByToken(address _tokenAddress) external view returns (ExpertInfo memory) {\n        string memory symbol = tokenToSymbol[_tokenAddress];\n        require(bytes(symbol).length > 0, \"Token not found\");\n        return experts[symbol];\n    }\n    \n    /**\n     * @dev Update expert consultation cost (only expert or owner)\n     * @param _symbol Expert symbol\n     * @param _newTokensPerQuery New cost per consultation\n     */\n    function updateExpertCost(string memory _symbol, uint256 _newTokensPerQuery) external {\n        require(experts[_symbol].tokenAddress != address(0), \"Expert does not exist\");\n        require(_newTokensPerQuery > 0, \"Cost must be greater than 0\");\n        \n        ExpertInfo storage expert = experts[_symbol];\n        require(\n            msg.sender == expert.expertAddress || msg.sender == owner(),\n            \"Only expert or owner can update cost\"\n        );\n        \n        expert.tokensPerQuery = _newTokensPerQuery;\n        \n        // Also update the token contract\n        ExpertToken(expert.tokenAddress).updateConsultationCost(_newTokensPerQuery);\n        \n        emit ExpertUpdated(_symbol, _newTokensPerQuery);\n    }\n    \n    /**\n     * @dev Activate/deactivate expert (only owner)\n     * @param _symbol Expert symbol\n     * @param _isActive New activity status\n     */\n    function setExpertActive(string memory _symbol, bool _isActive) external onlyOwner {\n        require(experts[_symbol].tokenAddress != address(0), \"Expert does not exist\");\n        \n        experts[_symbol].isActive = _isActive;\n        \n        if (_isActive) {\n            emit ExpertActivated(_symbol);\n        } else {\n            emit ExpertDeactivated(_symbol);\n        }\n    }\n    \n    /**\n     * @dev Update platform address (only owner)\n     * @param _newPlatformAddress New platform wallet address\n     */\n    function updatePlatformAddress(address _newPlatformAddress) external onlyOwner {\n        require(_newPlatformAddress != address(0), \"Platform address cannot be zero\");\n        platformAddress = _newPlatformAddress;\n    }\n    \n    /**\n     * @dev Get total number of experts\n     * @return count Total expert count\n     */\n    function getExpertCount() external view returns (uint256) {\n        return expertSymbols.length;\n    }\n    \n    /**\n     * @dev Batch create experts from JSON data (for initial setup)\n     * @param _names Array of expert names\n     * @param _symbols Array of expert symbols  \n     * @param _categories Array of expert categories\n     * @param _tokensPerQuery Array of consultation costs\n     * @param _expertAddresses Array of expert wallet addresses\n     */\n    function batchCreateExperts(\n        string[] memory _names,\n        string[] memory _symbols,\n        string[] memory _categories,\n        uint256[] memory _tokensPerQuery,\n        address[] memory _expertAddresses\n    ) external onlyOwner {\n        require(_names.length == _symbols.length, \"Array length mismatch\");\n        require(_names.length == _categories.length, \"Array length mismatch\");\n        require(_names.length == _tokensPerQuery.length, \"Array length mismatch\");\n        require(_names.length == _expertAddresses.length, \"Array length mismatch\");\n        \n        for (uint256 i = 0; i < _names.length; i++) {\n            // Skip if expert already exists\n            if (experts[_symbols[i]].tokenAddress == address(0)) {\n                // Call internal create function\n                _createExpertInternal(\n                    _names[i],\n                    _symbols[i],\n                    _categories[i],\n                    _tokensPerQuery[i],\n                    _expertAddresses[i]\n                );\n            }\n        }\n    }\n    \n    /**\n     * @dev Internal function to create expert (shared logic)\n     */\n    function _createExpertInternal(\n        string memory _name,\n        string memory _symbol,\n        string memory _category,\n        uint256 _tokensPerQuery,\n        address _expertAddress\n    ) internal returns (address) {\n        // Create token name in format \"BrainTrade {Expert Name} Token\"\n        string memory tokenName = string(abi.encodePacked(\"BrainTrade \", _name, \" Token\"));\n        \n        // Deploy new ExpertToken contract\n        ExpertToken expertToken = new ExpertToken(\n            tokenName,\n            _symbol,\n            _name,\n            _category,\n            _tokensPerQuery,\n            _expertAddress,\n            platformAddress\n        );\n        \n        address tokenAddress = address(expertToken);\n        \n        // Register expert in our registry\n        experts[_symbol] = ExpertInfo({\n            tokenAddress: tokenAddress,\n            name: _name,\n            symbol: _symbol,\n            category: _category,\n            tokensPerQuery: _tokensPerQuery,\n            expertAddress: _expertAddress,\n            isActive: true,\n            totalConsultations: 0,\n            totalRevenue: 0\n        });\n        \n        // Update mappings\n        tokenToSymbol[tokenAddress] = _symbol;\n        expertSymbols.push(_symbol);\n        \n        emit ExpertCreated(_symbol, tokenAddress, _expertAddress, _name, _tokensPerQuery);\n        \n        return tokenAddress;\n    }\n}\n"
      },
      "project/contracts/ExpertToken.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title ExpertToken\n * @dev ERC-20 token representing access to a specific expert's knowledge\n * \n * Each expert gets their own token with format bt{NAME} (e.g. btTHIEL, btMUSK)\n * Users buy these tokens to access AI consultations with the expert\n * \n * Key mechanics:\n * - Initial price: 1 USDT = 1000 expert tokens\n * - Tokens are spent when asking questions\n * - Tokens are returned to pool after AI response\n * - Expert receives revenue share from token usage\n */\ncontract ExpertToken is ERC20, Ownable {\n    // Expert info\n    string public expertName;          // Human-readable name (e.g. \"Peter Thiel\")\n    string public expertCategory;      // Category (e.g. \"Venture Capital\")\n    uint256 public consultationCost;   // Cost per consultation in tokens\n    address public expertAddress;      // Expert's wallet for revenue\n    \n    // Platform settings\n    address public platformAddress;    // Platform wallet for fees\n    uint256 public platformFeePercent = 10;  // 10% platform fee\n    \n    // Token economics\n    uint256 public constant INITIAL_PRICE = 1000;  // 1000 tokens per 1 USDT\n    uint256 public totalConsultations;              // Total consultations count\n    uint256 public totalRevenue;                    // Total revenue generated\n    \n    // Events for tracking usage\n    event ConsultationStarted(address indexed user, uint256 tokenAmount, uint256 consultationId);\n    event ConsultationCompleted(address indexed user, uint256 consultationId);\n    event RevenueDistributed(address indexed expert, uint256 expertAmount, uint256 platformAmount);\n    \n    /**\n     * @dev Initialize expert token with basic info\n     * @param _name Token name (e.g. \"BrainTrade Peter Thiel Token\")\n     * @param _symbol Token symbol (e.g. \"btTHIEL\") \n     * @param _expertName Human readable expert name\n     * @param _expertCategory Expert category\n     * @param _tokensPerQuery Cost per query in expert tokens (from JSON config)\n     * @param _expertAddress Expert's wallet address\n     * @param _platformAddress Platform's wallet address\n     */\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        string memory _expertName,\n        string memory _expertCategory,\n        uint256 _tokensPerQuery,\n        address _expertAddress,\n        address _platformAddress\n    ) ERC20(_name, _symbol) Ownable(msg.sender) {\n        expertName = _expertName;\n        expertCategory = _expertCategory;\n        consultationCost = _tokensPerQuery;\n        expertAddress = _expertAddress;\n        platformAddress = _platformAddress;\n        \n        // Mint initial supply to contract for sales\n        // 1M tokens = 1000 USDT worth at initial price\n        _mint(address(this), 1000000 * 10**decimals());\n    }\n    \n    /**\n     * @dev Purchase expert tokens with USDT (simplified for hackathon)\n     * In production this would integrate with DEX or payment system\n     * @param _amount Amount of tokens to purchase\n     */\n    function purchaseTokens(uint256 _amount) external payable {\n        require(_amount > 0, \"Amount must be greater than 0\");\n        require(balanceOf(address(this)) >= _amount, \"Not enough tokens available\");\n        \n        // For hackathon: simplified purchase without USDT integration\n        // In production: calculate USDT amount and transfer from user\n        \n        // Transfer tokens from contract to user\n        _transfer(address(this), msg.sender, _amount);\n    }\n    \n    /**\n     * @dev Start consultation - spend tokens for AI chat access\n     * @param _consultationId Unique ID for this consultation session\n     * @return success Whether consultation was started successfully\n     */\n    function startConsultation(uint256 _consultationId) external returns (bool) {\n        require(balanceOf(msg.sender) >= consultationCost, \"Insufficient token balance\");\n        \n        // Transfer tokens from user back to contract (temporary hold)\n        _transfer(msg.sender, address(this), consultationCost);\n        \n        totalConsultations++;\n        \n        emit ConsultationStarted(msg.sender, consultationCost, _consultationId);\n        return true;\n    }\n    \n    /**\n     * @dev Complete consultation and distribute revenue\n     * Called by platform after AI response is generated\n     * @param _user User who had the consultation\n     * @param _consultationId Consultation ID\n     */\n    function completeConsultation(address _user, uint256 _consultationId) external onlyOwner {\n        // Calculate revenue distribution\n        uint256 platformFee = (consultationCost * platformFeePercent) / 100;\n        uint256 expertRevenue = consultationCost - platformFee;\n        \n        // Distribute revenue (simplified - tokens instead of USDT for hackathon)\n        if (expertRevenue > 0) {\n            _transfer(address(this), expertAddress, expertRevenue);\n        }\n        if (platformFee > 0) {\n            _transfer(address(this), platformAddress, platformFee);\n        }\n        \n        totalRevenue += consultationCost;\n        \n        emit ConsultationCompleted(_user, _consultationId);\n        emit RevenueDistributed(expertAddress, expertRevenue, platformFee);\n    }\n    \n    /**\n     * @dev Update consultation cost (only expert can change)\n     * @param _newCost New cost per consultation in tokens\n     */\n    function updateConsultationCost(uint256 _newCost) external {\n        require(msg.sender == expertAddress || msg.sender == owner(), \"Only expert or owner\");\n        require(_newCost > 0, \"Cost must be greater than 0\");\n        \n        consultationCost = _newCost;\n    }\n    \n    /**\n     * @dev Get expert token info for frontend\n     * @return name_ Expert name\n     * @return category_ Expert category  \n     * @return cost_ Consultation cost\n     * @return consultations_ Total consultations\n     * @return revenue_ Total revenue\n     */\n    function getExpertInfo() external view returns (\n        string memory name_,\n        string memory category_,\n        uint256 cost_,\n        uint256 consultations_,\n        uint256 revenue_\n    ) {\n        return (expertName, expertCategory, consultationCost, totalConsultations, totalRevenue);\n    }\n    \n    /**\n     * @dev Check if user has enough tokens for consultation\n     * @param _user User address to check\n     * @return hasEnough Whether user can afford consultation\n     */\n    function canAffordConsultation(address _user) external view returns (bool) {\n        return balanceOf(_user) >= consultationCost;\n    }\n}\n"
      }
    }
  }
}